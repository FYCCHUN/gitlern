Git 是一个版本管理软件查看分支：git branch创建分支：git branch <name>切换分支：git checkout <name>创建+切换分支：git checkout -b <name>合并某分支到当前分支：git merge <name>删除分支：git branch -d <name>git merge --no-ff -m "merge with no-ff" devgit log --graph --pretty=oneline --abbrev-commitgit checkout -b dev[name]暂存工作现场：git stash 查看暂存内容：git stash list 恢复stash到工作状态并删除暂存内容：git stash pop 丢弃未合并分支：git branch -D <name>推送东西去远程分支，git branch --set-upstream dev origin 后再 git pull  再 git push origin dev 因此，多人协作的工作模式通常是这样：首先，可以试图用git push origin branch-name推送自己的修改；如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；如果合并有冲突，则解决冲突，并在本地提交；没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。这就是多人协作的工作模式，一旦熟悉了，就非常简单查看远程库信息，使用git remote -v；本地新建的分支如果不推送到远程，对其他人就是不可见的；从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；git tag -a <tagname> -m "blablabla..."可以指定标签信息；git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；命令git tag可以查看所有标签。命令git push origin <tagname>可以推送一个本地标签；命令git push origin --tags可以推送全部未推送过的本地标签；命令git tag -d <tagname>可以删除一个本地标签；命令git push origin :refs/tags/<tagname>可以删除一个远程标签。修改https为ssh连接    git remote set-url origin git@github:USERNAME/OTHERREPOSITROY.git